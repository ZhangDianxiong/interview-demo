	Decisions for how I designed my program: 
		-First I would cnstruct the game and let user to choose the direction, either they can choose to show programming skills or step to next layer. But it won't allowed if user don't have skills or not standing on ladder, ok back to moveing, after the direction has been choosen the choices will be valued. If not valided they will bee ask again for choosing.
		-After student moved the TA also randomly choose a direction for choosing. Next, I would call check out function to find out what happened arround student. If met skills just pick up. If met TAs they will show skills automatically. If not back to starting point at same layer. If they met Instructor at the surrounding block of Instructor with at least 3 skills. they would pass the game. If they don't have enough skills they just failed the class and quit a game with Robin's joking. I use a do-while loop to let user determine wether or not they want to play again if they want just resat, if not quit totally. 
		-Last setp is checking for game status. if status in Maze class is true that means the game is still on going. If not the game has been ended what ever student pass or doesn't pass the game. To determine whether or not they are fail or pass. I just check the Instructor's satisfaction satatus. If that status is true means you win or you loss. When student failed to escape the cs162 maze they just back to the starting position of first layer which means if the game status is false they are escap from this class. That is inpossible for them to jump ou of the maze with both fause on game status and Instructor's satisfaction.

	Plan for program testing
		-Just start the game as "escape 'char'", you will find you can't sart game with an error message. "escape maze.txt" can helps you for starting. You can move with 'W' 'S''A''D', try to move student. Then meet a TA with out any skills (or you can try to 'P' or 'U' before met TA). See that player back to the startting position. Pick up All skills and step into next level when you are standing on the ladder. To see it's work or not. When step into next level. Pick up all skills then step to last layer. Use a skill for appeasing befor you met TA. You can find that the satus of TAs changed. Keeping enough skills to met Instructor to try whether or the game is abled to been terminated. Then start the game go through the previous path with not enouth skills to met Instructor. To see what will happened.(Note that the Instructor will detect you, when you entered the his surrounding block.) Or if you feel this way is so complicated you can try what you want.

	How did my testing work out
		-My testing works perfect all profermonce are all correct. Nothing cause core dumps or segmentation fault. 
	
	What problems did me run into while I was developing this program:
		-When I test for the behavior of the MazeLevel classes. I find there are so many characters that shoulden't appear in my initial maze grid. I tooks alot of time to find out why. Finallty I find the reason: My constructor of maze level isn't correctly intialied.
    -Another thing is that due to the way which used to construct and implement MazeLevel vector, I find that implementation way causes unfixed memory leak. Just a lottle bit leak but I don't know How to fix it. I bage you don't give me a 5pts deduction on that, most memory include maze grid are all freed after the execution of the game. And that construction function only used for once time it won't cause series problem.(Nice I fixed all memory leak!!!)

	What resouces useful for solving the problem.
		-First of all, I must say thank you to all TAs who help me a lot in this assignmen. They are really helpful for solving problems. And professor Robin Hess is also good help for that. 
    -Other helps resources such as piazza helps me fix a lot of syntex error. I really appreciate student who help me find out problems event though I didn't post my snip code. (So amazing for their ability to find out bugs with out looking through code.) 